var async = require('async');
var fs = require('fs');
var Q = require('q');
var _ = require('underscore');
var coa = require('coa');

var rootCommand = module.exports.rootCommand = coa.Cmd();

var path = require('path');
coa.Cmd.prototype.loadCommands = function(options) {
    // Set option defaults
    _.defaults(options, {
        setupStack: []
    });
    
    var cmd = this;
    
    var commandsDir = path.join(options.rootDirectory, 'commands');
    var files = fs.readdirSync(commandsDir);
    var commands = cmd.commands = files.map(function(command) {
        var commandPath = path.join(commandsDir, command);
        var commandModule = commandPath;
        
        var stat = fs.statSync(commandPath);
        var isDirectory = stat.isDirectory();
        if (isDirectory) {
            // This command is a package (e.g. directory), rather than
            // a simple file, so the command definition module is
            // the command.js file inside the command directory
            commandModule = path.join(commandPath, 'command.js');
        }
        
        return {
            name: command,
            path: commandPath,
            module: commandModule,
            package: isDirectory
        };
    });
    
    // Load each of the commands
    commands.forEach(function(command) {
        // Load the command from the external module
        var module = command.module = require(command.module);
        
        try {
            var subcmd = command.cmd = cmd.cmd();
            
            // Initialize the command module
            if (module.load) {
                module.load();
            }
            
            if (options.coaPreProcess) {
                // Facilitate generic pre-processing of commands
                subcmd.apply(options.coaPreProcess);
            }
            // Now add the command as a coa subcommand if it loaded successfully
            subcmd.name(command.name).apply(module.COA);
            if (module.operationStack) {
                var operationStack = options.setupStack.concat(module.operationStack);
                subcmd.act(function(opts, args, res) {
                    var params = _.extend({
                        command: this._name // the name of the command being executed
                    }, opts, args);
                    
                    // Filter out operations based on the command-line flags present
                    var operations = operationStack.filter(function(operation) {
                        var flag = operation.flag;
                        if (flag) {
                            // If the flag name is preceeded by an exlamation point (!), the
                            // operation should be filtered out only if the flag IS present
                            return (flag[0] === '!') ? !params[flag.slice(1)] : params[flag];
                        }
                        else {
                            // This operation has no flag and is always enabled
                            return true;
                        }
                    }).map(function(operation) {
                        return async.apply(operation, params);
                    });
                    return Q.nfcall(async.series, operations).then(function() {
                        // Suppress output
                        return null;
                    });
                });
            }
            if (options.coaPostProcess) {
                // Facilitate generic post-processing of commands
                subcmd.apply(options.coaPostProcess);
            }
            subcmd.end();
        }
        catch(e) {
            if (e.code === 'MODULE_NOT_FOUND') {
                // The command dependencies have probably not been installed properly
                console.error('Failed to load command "%s"!'.error, command.name);
                console.error('Try running "appdev install" to install command npm dependencies'.hint);
            }
            else {
                throw e; // rethrow exception
            }
        }
    });
    
    // Add the install command to install command dependencies
    cmd.cmd() // inplace subcommand definition
        .name('install').title('Install command npm dependencies').helpful()
        .act(function() {
            var npm = require('npm');
            npm.load({}, function(err) {
                if (err) throw err;
                
                var install = function(command, callback) {
                    if (command.package) {
                        // Install this command's npm depdendencies if it is a package and not a single-file command
                        console.log('install'.green, command.name.info);
                        async.series([
                            function(callback) {
                                npm.localPrefix = command.path;
                                npm.commands.update([], callback);
                            },
                            function(callback) {
                                var subcommands = command.cmd.commands;
                                if (subcommands) {
                                    // Recursively install the command's subcommands
                                    async.eachSeries(subcommands, install, callback);
                                }
                                else {
                                    callback(null);
                                }
                            }
                        ], callback);
                    }
                    else {
                        callback(null);
                    }
                };
                
                async.eachSeries(commands, install, function(err) {
                    if (err) throw err;
                });
            });
            // Echo npm output to the console
            npm.on('log', function(message) {
                console.log(message);
            });
        })
        .end(); // end subcommand definition
    
    return this;
};
